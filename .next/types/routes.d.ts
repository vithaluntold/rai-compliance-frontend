// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/" | "/chat" | "/compliance/multi/ifrs/[documentId]" | "/documents" | "/documents/[documentId]" | "/extraction" | "/extraction/[documentId]" | "/results/[documentId]" | "/test"
type AppRouteHandlerRoutes = "/api/checklist" | "/api/checklist/[documentId]" | "/api/checklist/items/[checklistType]" | "/api/checklist/results/[documentId]" | "/api/checklist/results/[documentId]/[itemId]" | "/api/checklist/validate/[documentId]" | "/api/documents" | "/api/documents/[documentId]" | "/api/documents/[documentId]/checklist" | "/api/documents/[documentId]/company-details" | "/api/documents/[documentId]/export" | "/api/documents/[documentId]/extract" | "/api/documents/[documentId]/validate" | "/api/health"
type PageRoutes = never
type LayoutRoutes = "/"
type RedirectRoutes = never
type RewriteRoutes = "/api/[[...path]]"
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/": {}
  "/api/[[...path]]": { "path"?: string[]; }
  "/api/checklist": {}
  "/api/checklist/[documentId]": { "documentId": string; }
  "/api/checklist/items/[checklistType]": { "checklistType": string; }
  "/api/checklist/results/[documentId]": { "documentId": string; }
  "/api/checklist/results/[documentId]/[itemId]": { "documentId": string; "itemId": string; }
  "/api/checklist/validate/[documentId]": { "documentId": string; }
  "/api/documents": {}
  "/api/documents/[documentId]": { "documentId": string; }
  "/api/documents/[documentId]/checklist": { "documentId": string; }
  "/api/documents/[documentId]/company-details": { "documentId": string; }
  "/api/documents/[documentId]/export": { "documentId": string; }
  "/api/documents/[documentId]/extract": { "documentId": string; }
  "/api/documents/[documentId]/validate": { "documentId": string; }
  "/api/health": {}
  "/chat": {}
  "/compliance/multi/ifrs/[documentId]": { "documentId": string; }
  "/documents": {}
  "/documents/[documentId]": { "documentId": string; }
  "/extraction": {}
  "/extraction/[documentId]": { "documentId": string; }
  "/results/[documentId]": { "documentId": string; }
  "/test": {}
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
